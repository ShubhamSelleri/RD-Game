# import requests
# import time

# # Server URL
# SERVER_URL = "http://127.0.0.1:5000/check_gesture"

# def test_flask_server():
#     """
#     Sends POST requests to the Flask server to test the `/check_gesture` endpoint.
#     Continuously sends requests to mimic real-time usage.
#     """
#     print(f"Testing Flask server at {SERVER_URL}. Press Ctrl+C to stop.\n")

#     try:
#         while True:
#             # Send a POST request to the server
#             response = requests.post(SERVER_URL)

#             if response.status_code == 200:
#                 # Print the JSON response from the server
#                 print("Server Response:", response.json())
#             else:
#                 print(f"Error: Received status code {response.status_code}")

#             # Pause for a short time before sending the next request
#             time.sleep(0.5)

#     except KeyboardInterrupt:
#         print("\nStopped testing.")
#     except requests.exceptions.RequestException as e:
#         print(f"Error connecting to the server: {e}")
#     except Exception as e:
#         print(f"Unexpected error: {e}")

# if __name__ == "__main__":
#     test_flask_server()


# import requests
# import time

# # Server URL
# SERVER_URL = "http://127.0.0.1:5000/check_gesture"

# def test_flask_server():
#     """
#     Sends POST requests to the Flask server to test the `/check_gesture` endpoint.
#     Continuously sends requests to mimic real-time usage.
#     Handles 204 responses and prints only meaningful updates.
#     """
#     print(f"Testing Flask server at {SERVER_URL}. Press Ctrl+C to stop.\n")

#     try:
#         while True:
#             # Send a POST request to the server
#             response = requests.post(SERVER_URL)

#             if response.status_code == 200:
#                 # Print the JSON response from the server
#                 print("Server Response:", response.json())
#             elif response.status_code == 204:
#                 # No state change; no need to log
#                 print("No State Change Detected (204)")
#             else:
#                 print(f"Error: Received status code {response.status_code}")

#             # Pause for a short time before sending the next request
#             time.sleep(0.5)

#     except KeyboardInterrupt:
#         print("\nStopped testing.")
#     except requests.exceptions.RequestException as e:
#         print(f"Error connecting to the server: {e}")
#     except Exception as e:
#         print(f"Unexpected error: {e}")

# if __name__ == "__main__":
#     test_flask_server()

""" Working """
import requests
import time

# Server URL
SERVER_URL = "http://127.0.0.1:5000/check_gesture"

def test_flask_server():
    """
    Sends POST requests to the Flask server to test the `/check_gesture` endpoint.
    Tracks state changes and avoids logging redundant information.
    """
    print(f"Testing Flask server at {SERVER_URL}. Press Ctrl+C to stop.\n")

    last_gesture = None  # Track the last received gesture

    try:
        while True:
            # Send a POST request to the server
            response = requests.post(SERVER_URL)

            if response.status_code == 200:
                try:
                    server_response = response.json()
                    gesture = server_response.get("gesture", "Unknown Gesture")
                    
                    # Log only if the gesture state has changed
                    if gesture != last_gesture:
                        print("New Gesture Detected:", server_response)
                        last_gesture = gesture
                except ValueError:
                    print("Invalid JSON response from the server")
            elif response.status_code == 204:
                # Reset the gesture state if no gesture is detected
                if last_gesture is not None:
                    print("No Gesture Detected")
                    last_gesture = None
            else:
                print(f"Error: Received status code {response.status_code}")

            # Pause for a short time before sending the next request
            time.sleep(0.5)

    except KeyboardInterrupt:
        print("\nStopped testing.")
    except requests.exceptions.RequestException as e:
        print(f"Error connecting to the server: {e}")
    except Exception as e:
        print(f"Unexpected error: {e}")

if __name__ == "__main__":
    test_flask_server()



""" New test """
# import requests
# import time

# # Server URL
# SERVER_URL = "http://127.0.0.1:5000/check_gesture"

# def get_server_response():
#     """
#     Sends a POST request to the server and returns the response.
#     """
#     try:
#         response = requests.post(SERVER_URL, timeout=5)
#         return response
#     except requests.exceptions.RequestException as e:
#         print(f"Error connecting to the server: {e}")
#         return None

# def process_response(response, last_gesture):
#     """
#     Processes the server response and checks for state changes.
#     """
#     if response is None:
#         return last_gesture

#     if response.status_code == 200:
#         try:
#             server_response = response.json()
#             gesture = server_response.get("gesture", "Unknown Gesture")
#             # Log only if the gesture state has changed
#             if gesture != last_gesture:
#                 print("New Gesture Detected:", server_response)
#                 return gesture
#         except ValueError:
#             print("Invalid JSON response from the server")
#     elif response.status_code == 204:
#         # Reset the gesture state if no gesture is detected
#         if last_gesture is not None:
#             print("No Gesture Detected")
#         return None
#     else:
#         print(f"Error: Received status code {response.status_code}")

#     return last_gesture

# def test_flask_server():
#     """
#     Sends POST requests to the Flask server to test the `/check_gesture` endpoint.
#     Tracks state changes and avoids logging redundant information.
#     """
#     print(f"Testing Flask server at {SERVER_URL}. Press Ctrl+C to stop.\n")

#     last_gesture = None  # Track the last received gesture

#     try:
#         while True:
#             response = get_server_response()
#             last_gesture = process_response(response, last_gesture)
#             time.sleep(0.5)

#     except KeyboardInterrupt:
#         print("\nStopped testing.")
#     except Exception as e:
#         print(f"Unexpected error: {e}")

# if __name__ == "__main__":
#     test_flask_server()
